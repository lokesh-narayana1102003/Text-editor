// Class automatically generated by Dev-C++ New Class wizard

#include "findreplace.h" // class's header file

findreplace::findreplace()
{
}

findreplace::~findreplace()
{
}
std::vector<std::string> findreplace::splitIntoWords() {
    std::ifstream readFile("text.txt");
    std::string fileContent;
    if (readFile.is_open()) {
        std::stringstream buffer;
        buffer << readFile.rdbuf();
        fileContent = buffer.str();
        readFile.close();
    } else {
        std::cerr << "Unable to open file for reading." << std::endl;
        exit(0);
    }
    std::vector<std::string> words;
    std::stringstream ss(fileContent);
    std::string word;
    while (ss >> word) {
        word.erase(remove_if(word.begin(), word.end(), ::ispunct), word.end());
        if (!word.empty()) {
            words.push_back(word);
        }
    }
    return words;
}
std::string findreplace::joinWords(const std::vector<std::string>& words,const std::string& wordToFind,const std::string& replacementWord) {
    std::map<std::string, std::string> replacements;
    replacements[wordToFind] = replacementWord;
    for (std::vector<std::string>::iterator i = const_cast<std::vector<std::string>&>(words).begin(); i != const_cast<std::vector<std::string>&>(words).end(); ++i) {
            if (replacements.count(*i)) {
               *i = replacements[*i];
            }
    }
    std::string text;
    for (size_t i = 0; i < words.size(); ++i) {
        text += words[i];
        if (i < words.size() - 1) {
            text += " ";
        }
    }
    return text;
}
void findreplace::editContent(const std::string& newContent){
          std::ofstream writeFile("text.txt");
          if (writeFile.is_open()) {
             writeFile << newContent;
             writeFile.close();
             std::cout << "The word has been successfully replaced with in file." << std::endl;
          } else {
            std::cerr << "Unable to open file for writing the updated content." <<std::endl;
               return ;
          }
}
